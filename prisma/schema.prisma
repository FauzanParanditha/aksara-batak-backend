// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(cuid())
  fullName      String
  email         String   @unique
  passwordHash  String
  phone         String?
  role          String   // 'leader'
  emailVerificationToken String?
  isVerified    Boolean  @default(false)
  createdAt     DateTime @default(now())
  teams         Team[]
}

model Team {
  id             String           @id @default(cuid())
  teamName       String
  category       String
  leader         User             @relation(fields: [leaderId], references: [id])
  leaderId       String
  status         String           @default("draft")
  submissionLink String?
  qrCodeUrl      String?
  createdAt      DateTime         @default(now())
  members        TeamMember[]
  project        Project?
  presentation   PresentationSlot?
  scores         Score[]
}

model TeamMember {
  id         String   @id @default(cuid())
  team       Team     @relation(fields: [teamId], references: [id])
  teamId     String
  fullName   String
  email      String
  institution String
  roleInTeam String
  cvUrl      String?
  idCardUrl  String?
  qrCodeUrl  String?
  createdAt  DateTime @default(now())
}

model Project {
  id             String   @id @default(cuid())
  team           Team     @relation(fields: [teamId], references: [id])
  teamId         String   @unique
  title          String
  description    String
  repositoryUrl  String?
  demoUrl        String?
  fileUrl        String?
  submittedAt    DateTime?
}

model PresentationSlot {
  id        String   @id @default(cuid())
  team      Team     @relation(fields: [teamId], references: [id])
  teamId    String   @unique
  roomName  String
  date      DateTime
  startTime DateTime
  endTime   DateTime
  notes     String?
}

model Announcement {
  id        String   @id @default(cuid())
  title     String
  content   String
  target    String   // 'all', 'leader', or team ID
  createdAt DateTime @default(now())
}

model Judge {
  id           String   @id @default(cuid())
  fullName     String
  email        String   @unique
  passwordHash String
  scores       Score[]
}

model Score {
  id        String @id @default(cuid())
  judge     Judge @relation(fields: [judgeId], references: [id])
  judgeId   String
  team      Team  @relation(fields: [teamId], references: [id])
  teamId    String
  criteria  String
  score     Float
  comment   String?
}

model Email_Log {
  id           String      @id @default(uuid())
  to           String
  subject      String
  type         EmailType
  status       EmailStatus
  errorMessage String?
  body         String
  relatedId    String?
  sentAt       DateTime    @default(now())
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}

enum EmailType {
  qr
  certificate
  reminder
  verification
  annoucncement
  custom
}

enum EmailStatus {
  success
  failed
  pending
}