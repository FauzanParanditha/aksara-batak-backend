// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String                   @id @default(cuid())
  fullName               String
  email                  String                   @unique
  passwordHash           String
  phone                  String?
  role                   String // 'leader'
  emailVerificationToken String?
  isVerified             Boolean                  @default(false)
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime                 @updatedAt
  deletedAt              DateTime?
  passwordResetTokenExp  DateTime?
  teams                  Team[]
  PaymentVerificationLog PaymentVerificationLog[]
}

model Team {
  id             String            @id @default(cuid())
  teamName       String
  category       String
  leader         User              @relation(fields: [leaderId], references: [id])
  leaderId       String
  status         TeamStatus        @default(draft)
  submissionLink String?
  qrCodeUrl      String?
  queueNumber    Int?
  photoUrl       String?
  paymentStatus  String            @default("unpaid") // 'unpaid', 'pending', 'paid'
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  deletedAt      DateTime?
  members        TeamMember[]
  project        Project?
  presentation   PresentationSlot?
  scores         Score[]
  payment        Payment?
  UniqueCodePool UniqueCodePool[]
}

model TeamMember {
  id          String   @id @default(cuid())
  team        Team     @relation(fields: [teamId], references: [id])
  teamId      String
  fullName    String
  email       String
  institution String
  roleInTeam  String
  address     String?
  phone       String?
  cvUrl       String?
  idCardUrl   String?
  qrCodeUrl   String?
  createdAt   DateTime @default(now())

  @@unique([teamId, email])
}

model Project {
  id            String    @id @default(cuid())
  team          Team      @relation(fields: [teamId], references: [id])
  teamId        String    @unique
  title         String
  description   String
  repositoryUrl String?
  demoUrl       String?
  fileUrl       String?
  submittedAt   DateTime?
}

model PresentationSlot {
  id        String   @id @default(cuid())
  team      Team     @relation(fields: [teamId], references: [id])
  teamId    String   @unique
  roomName  String
  date      DateTime
  startTime DateTime
  endTime   DateTime
  notes     String?
}

model Announcement {
  id        String    @id @default(cuid())
  title     String
  content   String
  target    String // 'all', 'leader', or team ID
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model Judge {
  id           String  @id @default(cuid())
  fullName     String
  email        String  @unique
  passwordHash String
  scores       Score[]
}

model Score {
  id       String  @id @default(cuid())
  judge    Judge   @relation(fields: [judgeId], references: [id])
  judgeId  String
  team     Team    @relation(fields: [teamId], references: [id])
  teamId   String
  criteria String
  score    Float
  comment  String?
}

model Email_Log {
  id           String      @id @default(uuid())
  to           String
  subject      String
  type         EmailType
  status       EmailStatus
  errorMessage String?
  body         String
  relatedId    String?
  sentAt       DateTime    @default(now())
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}

model Payment {
  id             String        @id @default(cuid())
  team           Team          @relation(fields: [teamId], references: [id])
  teamId         String        @unique
  amount         Int
  uniqueCode     Int
  method         String // "manual" | "midtrans"
  status         PaymentStatus
  paymentUrl     String? // hanya untuk Midtrans Snap (jika method = midtrans)
  manualProofUrl String? // hanya untuk manual transfer
  notes          String? // catatan verifikasi oleh admin
  paidAt         DateTime?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  deletedAt      DateTime?

  verificationLogs PaymentVerificationLog[]
}

model PaymentVerificationLog {
  id        String  @id @default(cuid())
  payment   Payment @relation(fields: [paymentId], references: [id])
  paymentId String

  verifiedBy   User   @relation(fields: [verifiedById], references: [id])
  verifiedById String

  status     PaymentStatus
  notes      String?
  verifiedAt DateTime      @default(now())
}

model UniqueCodePool {
  id        Int       @id @default(autoincrement())
  code      Int       @unique
  isUsed    Boolean   @default(false)
  usedAt    DateTime?
  team      Team?    @relation(fields: [teamId], references: [id])
  teamId    String?  @unique
  createdAt DateTime  @default(now())
}

enum EmailType {
  qr
  certificate
  reminder
  verification
  annoucncement
  custom
  paymentVerified
  resetPassword
}

enum EmailStatus {
  success
  failed
  pending
}

enum PaymentStatus {
  unpaid
  pending
  waiting_verification
  paid
  failed
  expired
  rejected
}

enum TeamStatus {
  draft
  submitted
  paid
  qualified
  semifinal
  final
  eliminated
}
